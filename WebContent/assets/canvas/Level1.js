// -- user code here --		var musicEnabled = true;	var fxEnabled = true;/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * Level1.
 */
function Level1() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var Level1_proto = Object.create(Phaser.State.prototype);
Level1.prototype = Level1_proto;
Level1.prototype.constructor = Level1;

Level1.prototype.init = function () {
	
	this.myInit();
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	
};

Level1.prototype.preload = function () {
	
	this.myPreload();
	
	this.load.pack('graphics', 'assets/pack.json');
	this.load.pack('Fonts', 'assets/pack.json');
	
};

Level1.prototype.create = function () {
	this.add.sprite(0.0, 0.0, 'bg');
	
	var _breakedPlatforms = this.add.group();
	
	var _platforms = this.add.group();
	
	var _luckyBalls = this.add.group();
	
	var _groupCheer = this.add.group();
	
	var _prizeBanner = this.add.sprite(-5.0, -128.0, 'prizeBanner', null, _groupCheer);
	
	var _cheerUpText = this.add.bitmapText(172.0, -89.0, 'PixelFont', 'Excelent', 64, _groupCheer);
	
	var _visor = this.add.sprite(92.0, 0.0, 'visor');
	
	var _time = this.add.bitmapText(246.0, 48.0, 'PixelFont', '0', 64);
	_time.maxWidth = 400;
	
	this.add.bitmapText(221.0, 116.0, 'PixelFont', 'Bounces', 32);
	
	var _deathBars = this.add.group();
	
	var _cesped = this.add.sprite(-22.0, 819.0, 'cesped');
	_cesped.scale.set(1.0, 0.5);
	
	var _floor = this.add.sprite(-33.0, 845.0, 'floor');
	
	var _menuBtn = this.add.sprite(-1.0, 12.0, 'menuBtn');
	
	var _currentLevelText = this.add.bitmapText(155.0, 893.0, 'PixelFont', '- Novice -', 64);
	_currentLevelText.maxWidth = 800;
	_currentLevelText.align = 'center';
	
	var _megaBall = this.add.sprite(306.0, -285.0, 'megaBall');
	_megaBall.data = this.data={
	powerballs:1
	};
	
	
	
	// fields
	
	this.fBreakedPlatforms = _breakedPlatforms;
	this.fPlatforms = _platforms;
	this.fLuckyBalls = _luckyBalls;
	this.fGroupCheer = _groupCheer;
	this.fPrizeBanner = _prizeBanner;
	this.fCheerUpText = _cheerUpText;
	this.fVisor = _visor;
	this.fTime = _time;
	this.fDeathBars = _deathBars;
	this.fCesped = _cesped;
	this.fFloor = _floor;
	this.fMenuBtn = _menuBtn;
	this.fCurrentLevelText = _currentLevelText;
	this.fMegaBall = _megaBall;
	
	
	this.myCreate();
	
};

/* --- end generated code --- */// -- user code here --Level1.prototype.myInit = function () {	};Level1.prototype.myPreload = function () {	this.game.load.audio('jumpBall', ['assets/audio/jump.mp3','assets/audio/jump.ogg']);	this.game.load.audio('luckyBall', ['assets/audio/luckyBall.mp3','assets/audio/luckyBall.ogg']);	this.game.load.audio('death', ['assets/audio/death.mp3','assets/audio/death.ogg']);	this.game.load.audio('BgMusic', ['assets/audio/BgMusic.mp3','assets/audio/BgMusic.ogg']);	this.game.load.audio('BgMusic2', ['assets/audio/BgMusic2.mp3','assets/audio/BgMusic2.ogg']);	this.game.load.audio('cortar', ['assets/audio/cortar.mp3','assets/audio/cortar.ogg']);	this.game.load.audio('sonidoLevel', ['assets/audio/sonidoLevel.mp3','assets/audio/sonidoLevel.ogg']);};Level1.prototype.switchMusic = function () {		if(musicEnabled){		BgMusic.pause();		BgMusic2.pause();		musicEnabled = false;		console.log('musica disabled');			}else{			if(this.BgMusic = 1){			BgMusic.play();		}else{			BgMusic2.stop();		}				musicEnabled = true;			console.log('musica musicEnabled');	}	};Level1.prototype.switchFX = function () {		if(fxEnabled){	this.fxSounds.forEach(function(soundFx) { 			soundFx.mute = true;	},this);		fxEnabled = false;		console.log('fx disabled');			}else{		this.fxSounds.forEach(function(soundFx) { 		soundFx.mute = false;	},this);					fxEnabled = true;		console.log('fx enabled');	}	};Level1.prototype.manejarPausa = function () {  this.game.paused = true;       	var pauseBg = this.game.add.graphics(0, 0);				pauseBg.beginFill(0x2E610B, 0.6); 	    pauseBg.moveTo(0,0);	    pauseBg.lineTo(640, 0);	    pauseBg.lineTo(640, 960);	    pauseBg.lineTo(0, 960);	    pauseBg.lineTo(0, 0);	    pauseBg.endFill();	    this.Bg = this.game.add.sprite(0, 0, pauseBg.generateTexture());	    pauseBg.destroy();	    var pauseBgMenu = this.game.add.graphics(0, 0);	    pauseBgMenu.beginFill(0x2E610B); 	    pauseBgMenu.moveTo(0,0);	    pauseBgMenu.lineTo(524, 0);	    pauseBgMenu.lineTo(524, 330);	    pauseBgMenu.lineTo(0, 330);	    pauseBgMenu.lineTo(0, 0);	    pauseBgMenu.endFill();	    this.pauseBgMenu = this.game.add.sprite(this.game.width/2, this.game.height/2, pauseBgMenu.generateTexture());	    this.pauseBgMenu.anchor.setTo(0.5);	    pauseBgMenu.destroy();	    this.pauseIcons = this.game.add.sprite(0, 180, 'pauseIcons');	    this.OnBtn = this.game.add.sprite(220, 360, 'OnBtn');		this.OffMusic = this.game.add.sprite(220, 360, 'OffBtn');		this.OnFx = this.game.add.sprite(220, 430, 'OnBtn');		this.OffFx = this.game.add.sprite(220, 430, 'OffBtn');		this.HowToPlayBtn = this.game.add.sprite(220, 500, 'HowToPlayBtn');		this.QuitBtn = this.game.add.sprite(220, 570, 'QuitBtn');		if(musicEnabled){							  		this.OnBtn.visible = true;							   		this.OffMusic.visible = false;							   }else{								   	this.OnBtn.visible = false;								   	this.OffMusic.visible = true;							   }		if(fxEnabled){							  		this.OnFx.visible = true;							   		this.OffFx.visible = false;							   }else{								   	this.OnFx.visible = false;								   	this.OffFx.visible = true;							   }}Level1.prototype.unpause = function (event) {  if(this.game.paused){ 							  	var x1 = this.state.getCurrentState﻿().pauseBgMenu.x - this.state.getCurrentState﻿().pauseBgMenu.width/2;			  		x2 = this.state.getCurrentState﻿().pauseBgMenu.x + this.state.getCurrentState﻿().pauseBgMenu.width/2;			  		y1 = this.state.getCurrentState﻿().pauseBgMenu.y - this.state.getCurrentState﻿().pauseBgMenu.height/2;			  		y2 = this.state.getCurrentState﻿().pauseBgMenu.y + this.state.getCurrentState﻿().pauseBgMenu.height/2;			    if(event.x > x1 && event.x < x2 && event.y > y1 && event.y < y2 ){			    						var mx1 = this.state.getCurrentState﻿().OffMusic.x;							mx2 = this.state.getCurrentState﻿().OffMusic.x + this.state.getCurrentState﻿().OffMusic.width;							my1 = this.state.getCurrentState﻿().OffMusic.y;							my2 = this.state.getCurrentState﻿().OffMusic.y + this.state.getCurrentState﻿().OffMusic.height;						var fx1 = this.state.getCurrentState﻿().OnFx.x;							fx2 = this.state.getCurrentState﻿().OnFx.x + this.state.getCurrentState﻿().OnFx.width;							fy1 = this.state.getCurrentState﻿().OnFx.y;							fy2 = this.state.getCurrentState﻿().OnFx.y + this.state.getCurrentState﻿().OnFx.height;						var hx1 = this.state.getCurrentState﻿().HowToPlayBtn.x;							hx2 = this.state.getCurrentState﻿().HowToPlayBtn.x + this.state.getCurrentState﻿().HowToPlayBtn.width;							hy1 = this.state.getCurrentState﻿().HowToPlayBtn.y;							hy2 = this.state.getCurrentState﻿().HowToPlayBtn.y + this.state.getCurrentState﻿().HowToPlayBtn.height;						var qx1 = this.state.getCurrentState﻿().QuitBtn.x;							qx2 = this.state.getCurrentState﻿().QuitBtn.x + this.state.getCurrentState﻿().QuitBtn.width;							qy1 = this.state.getCurrentState﻿().QuitBtn.y;							qy2 = this.state.getCurrentState﻿().QuitBtn.y + this.state.getCurrentState﻿().QuitBtn.height;						if(event.x > mx1 && event.x < mx2 && event.y > my1 && event.y < my2 ){ //boton de musica																  if(musicEnabled){									this.OnBtn.visible = false;							   		this.OffMusic.visible = true;							   								   }else{								   	this.OnBtn.visible = true;								   	this.OffMusic.visible = false;							   }	    										this.state.getCurrentState﻿().switchMusic(); 													}					if(event.x > fx1 && event.x < fx2 && event.y > fy1 && event.y < fy2 ){ //boton de fx																  if(fxEnabled){									this.OnFx.visible = false;							   		this.OffFx.visible = true;							   								   }else{								   	this.OnFx.visible = true;								   	this.OffFx.visible = false;							   }	    														this.state.getCurrentState﻿().switchFX(); 													}					if(event.x > hx1 && event.x < hx2 && event.y > hy1 && event.y < hy2 ){ //boton de how to play															this.game.cache.removeSound('BgMusic');						this.game.cache.removeSound('BgMusic2');						this.game.state.start('Instructions');						this.game.paused = false;									}					if(event.x > qx1 && event.x < qx2 && event.y > qy1 && event.y < qy2 ){ //boton de salir									console.log('quiting');						location.reload();									}			    	  }else{   				   				this.game.paused = false;			  	this.state.getCurrentState﻿().Bg.destroy();			  	this.state.getCurrentState﻿().pauseBgMenu.destroy();			  	this.state.getCurrentState﻿().pauseIcons.destroy();			  	this.state.getCurrentState﻿().OnBtn.destroy();			  	this.state.getCurrentState﻿().OffMusic.destroy();			  	this.state.getCurrentState﻿().OnFx.destroy();			  	this.state.getCurrentState﻿().OffFx.destroy();			  	this.state.getCurrentState﻿().HowToPlayBtn.destroy();			  	this.state.getCurrentState﻿().QuitBtn.destroy();			  }			  }}Level1.prototype.swipeDownAction = function (pointer) {}Level1.prototype.swipeUpAction = function (pointer) {			this.swipeCoordX2 = pointer.x;  			this.swipeCoordY2 = pointer.y; 			var margenBalon = 60; 			var ballTop = this.fMegaBall.position.y - this.fMegaBall.height/2-margenBalon;			var ballBottom = this.fMegaBall.position.y + this.fMegaBall.height/2+margenBalon;			var BallLeft = this.fMegaBall.position.x - this.fMegaBall.width/2;			var BallRight = this.fMegaBall.position.x + this.fMegaBall.width/2;								this.line1 = new Phaser.Line(this.swipeCoordX, this.swipeCoordY, this.swipeCoordX2, this.swipeCoordY2); 			var dibujoLinea=this.game.add.graphics(0,0);    			dibujoLinea.lineStyle(20, 0xFFffff, 0.1);  			dibujoLinea.drawCircle(this.line1.start.x, this.line1.start.y, 10);  			dibujoLinea.moveTo(this.line1.start.x,this.line1.start.y);//moving position of graphic if you draw mulitple lines   			dibujoLinea.lineTo(this.line1.end.x,this.line1.end.y);  			dibujoLinea.drawCircle(this.line1.end.x, this.line1.end.y, 10);  			dibujoLinea.endFill(); 			var timer = this.game.time.create(false);  			timer.loop(500, erraseline, this);  			timer.start();		   function erraseline(){			dibujoLinea.kill();			timer.destroy();		   }		if(this.swipeCoordX2 > BallLeft && this.swipeCoordX2 < BallRight ){ // detectar si el swipe fue dentro de la bola		if(this.swipeCoordY2 > ballTop && this.swipeCoordY2 < ballBottom ){						this.cascaritas++;			var currentLevelCheck = this.levelUp * this.currentLevel;				if(this.cascaritas==this.levelUp * this.currentLevel){			pigArrives = this.game.add.tween(this.fGroupCheer);		    pigArrives.to({y:this.game.height/2}, 1000, Phaser.Easing.Bounce.Out);		    pigArrives.onComplete.add(theEnd, this);		    pigArrives.start();		  			    this.fCheerUpText.text = this.barras[this.currentLevel-1];			this.fCurrentLevelText.text = this.barras[this.currentLevel-1];		     if(this.currentLevel-1 >= this.barras.lenght){		    	this.currentLevel = 0;		    }		    	levelUpSound.play();				this.currentLevel++						}				function theEnd() {		    		    e = this.game.add.tween(this.fGroupCheer);		    		    e.to({ y: -200 }, 500, Phaser.Easing.Bounce.Out);		    e.start();		}		this.state.getCurrentState﻿().fTime.text = this.cascaritas; //this.state.getCurrentState﻿().counter + ' s';		console.log(this.cascaritas);			//var kick = this.add.sprite(this.swipeCoordX2, ballBottom-margenBalon , 'kick');		var kick = this.add.sprite(this.swipeCoordX2, ballBottom-margenBalon , 'shoe');		kick.anchor.setTo(0.5,0.5);				var timerKick = this.game.time.create(false);		timerKick.loop(500, erraseKick, this);		timerKick.start();			function erraseKick(){			kick.kill();			timer.destroy();		  }			if(this.swipeCoordX2 < 0){}			this.PowerX = Math.abs(this.swipeCoordX - this.swipeCoordX2);						if(this.PowerX >= this.maxPowerX){				this.PowerX = this.maxPowerX;			}			this.DirX = Math.sign(this.swipeCoordX - this.swipeCoordX2);				this.VectorX = this.DirX * this.PowerX;									this.PowerY = this.swipeCoordY - this.swipeCoordY2;						this.DirY = Math.sign(this.swipeCoordY - this.swipeCoordY2);				this.VectorY = this.DirY * this.PowerY;						if( this.PowerY > this.minJumpIntention && this.DirY == 1){ //si tiene intencion de salto				jumpBall.play('jumpBall');				this.wannaJump = true;					}			}		}}Level1.prototype.myCreate = function () {	this.game.sound.mute = false;	this.fMenuBtn.inputEnabled = true;	this.fMenuBtn.events.onInputUp.add(this.manejarPausa,this);  //pausar juego  	this.game.input.onDown.add(this.unpause, this); //quitar pausa		this.barras=['Good', 'Incredible', 'Excelent', 'Amazing', 'Experienced', 'Insane', 'Soccer god' , 'Super!' , 'Hyper!', 'Cant be!', 'Not sane!' , 'Maximun combo!', 'Legend' , 'Hot Shot', 'Survivor', 'Warrior' , 'Proficient' , 'Phenomenon', 'Guru', 'Ultimate Authority'];	this.levelUp = 20; //variable que verifica cada cuantos niveles sale una leyenda de this.barras	this.currentLevel = 1;			BgMusic = this.game.add.audio('BgMusic', 0.3); //agregar musica y volumen	BgMusic.allowMultiple = false;	BgMusic.loop = true;	BgMusic2 = this.game.add.audio('BgMusic2', 0.3); //agregar musica y volumen	BgMusic2.allowMultiple = false;	BgMusic2.loop = true;		var BgMusicSelector = Math.round(Math.random()) //agreagar musica de bg randomicamente	if(BgMusicSelector >= 0.5 && musicEnabled){		this.BgMusic = 1;		BgMusic.play();			}	if(BgMusicSelector <= 0.5 && musicEnabled){		this.BgMusic = 2;		BgMusic2.play();			}	jumpBall = this.game.add.audio('jumpBall');	jumpBall.allowMultiple = false;	jumpBall.addMarker('jumpBall', 0, 0.13	);	luckyBall = this.game.add.audio('luckyBall');	luckyBall.allowMultiple = false;	luckyBall.addMarker('luckyBall', 0, 0.619);	death = this.game.add.audio('death');	death.allowMultiple = false;	death.addMarker('death', 0, 2.26);	cortar = this.game.add.audio('cortar');	cortar.allowMultiple = false;	cortar.addMarker('cortar', 0, 0.92);	levelUpSound = this.game.add.audio('levelUpSound');	levelUpSound.allowMultiple = false;	levelUpSound.addMarker('levelUpSound', 0, 1.10);		this.fxSounds = [jumpBall,luckyBall,death, levelUpSound,cortar]; //agreagar aqui todos los sound fx que se necesita adminstrar	if(!fxEnabled){		this.fxSounds.forEach(function(soundFx) { 	 //en caso de que se deshabilite los sonidos fxs		soundFx.mute = true;	},this);	}	this.jumping = false;	this.doubleJumping = false;	this.deathPhase = new Phaser.Signal();	this.game.physics.enable(this.fMegaBall, Phaser.Physics.ARCADE);	//this.fMegaBall.body.setCircle(30);	this.fMegaBall.reset(this.fMegaBall.x, this.fMegaBall.y);	this.fMegaBall.body.collideWorldBounds = true;		this.fMegaBall.body.checkCollision.up = false;	this.fMegaBall.body.bounce.y = 0.60;	this.fMegaBall.body.bounce.x = 0.60;	this.fMegaBall.body.allowgravity = true;	this.fMegaBall.body.gravity.y = 1980;	this.fMegaBall.anchor.setTo(0.5, 0.5);	this.fMegaBall.body.velocity.x = 0	this.fMegaBall.body.angularVelocity = 0;		this.game.physics.enable(this.fFloor, Phaser.Physics.ARCADE); //habilito el piso como un physic	this.fFloor.body.immovable = true;		this.swipeCoordX = 0;	this.swipeCoordX2 = 0;	this.swipeCoordY = 0;	this.swipeCoordY2 = 0;	this.VectorX = 0;	this.VectorY = 0;	this.PowerX = 0	this.DirX = 0;	this.PowerY = 0	this.DirY = 0;	this.ExtraPowerY = 3;	this.ExtraPowerX = 3;	this.wannaJump = false;	this.minJumpIntention = 65;	this.maxPowerX = 90;	this.cascaritas = 0;		this.game.input.onDown.add(function(pointer) { //manejo de swipe control de pantalla			this.swipeCoordX = pointer.x;  			this.swipeCoordY = pointer.y;   						}, this);   	this.game.input.onUp.add(this.swipeUpAction, this);  //manejo de swipe UP control de pantalla};Level1.prototype.update = function () {this.game.physics.arcade.collide(this.fMegaBall, this.fFloor);if (this.fMegaBall.body.touching.down && this.fFloor.body.touching.up)            {            		this.cascaritas=0;            }	this.fMegaBall.body.velocity.x = -this.VectorX*this.ExtraPowerX;		if(this.fMegaBall.body.velocity.x==0){			this.fMegaBall.body.angularVelocity = 0;	}else{		if(this.DirX<=0){			this.fMegaBall.body.angularVelocity = -this.VectorX;		}else{			this.fMegaBall.body.angularVelocity = -this.VectorX;		}	}	if(this.wannaJump && !this.doubleJumping){								this.fMegaBall.body.velocity.y = -4*this.PowerY;				this.wannaJump = false;				this.jumping = true;					}	//console.log('doubleJump ' + this.doubleJump);if(this.fMegaBall.y>this.game.height+50){	//this.game.state.restart(this.CurrentState);	this.deathPhase.dispatch();}	};Level1.prototype.deathAnimation = function () {	BgMusic.stop();	BgMusic2.stop();	death.play('death');	console.log('deathanim');	//this.game.state.restart(this.CurrentState);	emitter = this.game.add.emitter(this.fMegaBall.x, this.game.height, 4);    emitter.makeParticles('explodeBar');	emitter.blendMode = PIXI.blendModes.SCREEN;     emitter.setRotation(0, 0);    emitter.setAlpha(0.3, 0.8);    emitter.setScale(0.1, 0.7);    emitter.gravity = -16000;    //	false means don't explode all the sprites at once, but instead release at a rate of one particle per 100ms    //	The 5000 value is the lifespan of each particle before it's killed    emitter.start(false, 50000, 100);emitter2 = this.game.add.emitter(this.fMegaBall.x, this.game.height, 5);    emitter2.makeParticles('ring');    emitter2.setRotation(0, 180);    emitter2.setAlpha(0.3, 0.8);    emitter2.setScale(0.3, 1);    emitter2.gravity = 50;    //	false means don't explode all the sprites at once, but instead release at a rate of one particle per 100ms    //	The 5000 value is the lifespan of each particle before it's killed    emitter2.start(false, 3000, 100);this.game.time.events.add(Phaser.Timer.SECOND * 2, pantallaLose, this);function pantallaLose(){	this.GameOverScreen = this.game.add.sprite(0, 0, 'GameOverScreen');	this.GameOverScreen.alpha = 0.1;	this.game.add.tween(this.GameOverScreen).to( { alpha: 1 }, 500, Phaser.Easing.Linear.None, true);	this.againBtn = this.game.add.sprite(this.game.width/2, this.game.height/2+130, 'againBtn');	this.againBtn.anchor.setTo(0.5, 0.5);	this.score = this.game.add.bitmapText(this.game.width/2, this.game.height/2-5, 'PixelFont', this.fTime.text, 64);	this.score.anchor.setTo(0.5, 0.5);	this.againBtn.inputEnabled = true;	this.againBtn.events.onInputUp.add(function(pointer) {		this.game.state.restart(this.CurrentState);		this.game.time.reset();	   	}, this);  	} // this.game.time.events.add(Phaser.Timer.SECOND * 2, reiniciarNivel, this);function reiniciarNivel(){this.game.state.restart(this.CurrentState);this.game.time.reset();}};Level1.prototype.render = function () {// this.game.debug.geom(this.line1);	//this.game.debug.body(this.fMegaBall);	};