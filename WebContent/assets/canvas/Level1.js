// -- user code here --		var musicEnabled = true;	var fxEnabled = true;/* --- start generated code --- */// Generated by  1.5.4 (Phaser v2.6.2)/** * Level1. */function Level1() {		Phaser.State.call(this);	}/** @type Phaser.State */var Level1_proto = Object.create(Phaser.State.prototype);Level1.prototype = Level1_proto;Level1.prototype.constructor = Level1;Level1.prototype.init = function () {		this.myInit();		this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;	this.scale.pageAlignHorizontally = true;	this.scale.pageAlignVertically = true;	};Level1.prototype.preload = function () {		this.myPreload();		this.load.pack('graphics', 'assets/pack.json');	this.load.pack('Fonts', 'assets/pack.json');	};Level1.prototype.create = function () {	this.add.sprite(0.0, 0.0, 'bg');		this.add.sprite(0.0, 0.0, 'hangar');		this.add.sprite(202.0, 55.0, 'pista');		var _piezasLeft = this.add.group();		var _groupCheer = this.add.group();		var _prizeBanner = this.add.sprite(0.0, -128.0, 'prizeBanner', null, _groupCheer);		var _cheerUpText = this.add.bitmapText(195.0, -89.0, 'PixelFont', 'Excelent', 64, _groupCheer);	_cheerUpText.align = 'center';		var _visor = this.add.sprite(4.0, -120.0, 'visor');		var _menuBtn = this.add.sprite(18.0, 24.0, 'menuBtn');		this.add.sprite(0.0, 0.0, 'fusion');		var _floor = this.add.sprite(0.0, 678.0, 'floor');	_floor.alpha = 0.0;		this.add.sprite(0.0, 0.0, 'portal');		var _casillas = this.add.group();		var _casilla1 = this.add.sprite(121.0, 832.0, 'casilla', null, _casillas);	_casilla1.alpha = 0.0;		var _casilla2 = this.add.sprite(230.0, 837.0, 'casilla', null, _casillas);	_casilla2.alpha = 0.0;		var _casilla3 = this.add.sprite(344.0, 837.0, 'casilla', null, _casillas);	_casilla3.alpha = 0.0;		var _casilla4 = this.add.sprite(454.0, 835.0, 'casilla', null, _casillas);	_casilla4.alpha = 0.0;		var _draggedPieza = this.add.group();				// fields		this.fPiezasLeft = _piezasLeft;	this.fGroupCheer = _groupCheer;	this.fPrizeBanner = _prizeBanner;	this.fCheerUpText = _cheerUpText;	this.fVisor = _visor;	this.fMenuBtn = _menuBtn;	this.fFloor = _floor;	this.fCasillas = _casillas;	this.fCasilla1 = _casilla1;	this.fCasilla2 = _casilla2;	this.fCasilla3 = _casilla3;	this.fCasilla4 = _casilla4;	this.fDraggedPieza = _draggedPieza;			this.myCreate();	};/* --- end generated code --- */// -- user code here --Level1.prototype.myInit = function () {	};Level1.prototype.myPreload = function () {	this.game.load.audio('jumpBall', ['assets/audio/jump.mp3','assets/audio/jump.ogg']);	this.game.load.audio('luckyBall', ['assets/audio/luckyBall.mp3','assets/audio/luckyBall.ogg']);	this.game.load.audio('death', ['assets/audio/death.mp3','assets/audio/death.ogg']);	this.game.load.audio('BgMusic', ['assets/audio/BgMusic.mp3','assets/audio/BgMusic.ogg']);	this.game.load.audio('BgMusic2', ['assets/audio/BgMusic2.mp3','assets/audio/BgMusic2.ogg']);	this.game.load.audio('cortar', ['assets/audio/cortar.mp3','assets/audio/cortar.ogg']);	this.game.load.audio('sonidoLevel', ['assets/audio/sonidoLevel.mp3','assets/audio/sonidoLevel.ogg']);};Level1.prototype.switchMusic = function () {		if(musicEnabled){		BgMusic.pause();		BgMusic2.pause();		musicEnabled = false;		console.log('musica disabled');			}else{			if(this.BgMusic = 1){			BgMusic.play();		}else{			BgMusic2.stop();		}				musicEnabled = true;			console.log('musica musicEnabled');	}	};Level1.prototype.switchFX = function () {		if(fxEnabled){	this.fxSounds.forEach(function(soundFx) { 			soundFx.mute = true;	},this);		fxEnabled = false;		console.log('fx disabled');			}else{		this.fxSounds.forEach(function(soundFx) { 		soundFx.mute = false;	},this);					fxEnabled = true;		console.log('fx enabled');	}	};Level1.prototype.manejarPausa = function () {  this.game.paused = true;       	var pauseBg = this.game.add.graphics(0, 0);				pauseBg.beginFill(0x2E610B, 0.6); 	    pauseBg.moveTo(0,0);	    pauseBg.lineTo(640, 0);	    pauseBg.lineTo(640, 960);	    pauseBg.lineTo(0, 960);	    pauseBg.lineTo(0, 0);	    pauseBg.endFill();	    this.Bg = this.game.add.sprite(0, 0, pauseBg.generateTexture());	    pauseBg.destroy();	    var pauseBgMenu = this.game.add.graphics(0, 0);	    pauseBgMenu.beginFill(0x2E610B); 	    pauseBgMenu.moveTo(0,0);	    pauseBgMenu.lineTo(524, 0);	    pauseBgMenu.lineTo(524, 330);	    pauseBgMenu.lineTo(0, 330);	    pauseBgMenu.lineTo(0, 0);	    pauseBgMenu.endFill();	    this.pauseBgMenu = this.game.add.sprite(this.game.width/2, this.game.height/2, pauseBgMenu.generateTexture());	    this.pauseBgMenu.anchor.setTo(0.5);	    pauseBgMenu.destroy();	    this.pauseIcons = this.game.add.sprite(0, 180, 'pauseIcons');	    this.OnBtn = this.game.add.sprite(220, 360, 'OnBtn');		this.OffMusic = this.game.add.sprite(220, 360, 'OffBtn');		this.OnFx = this.game.add.sprite(220, 430, 'OnBtn');		this.OffFx = this.game.add.sprite(220, 430, 'OffBtn');		this.HowToPlayBtn = this.game.add.sprite(220, 500, 'HowToPlayBtn');		this.QuitBtn = this.game.add.sprite(220, 570, 'QuitBtn');		if(musicEnabled){							  		this.OnBtn.visible = true;							   		this.OffMusic.visible = false;							   }else{								   	this.OnBtn.visible = false;								   	this.OffMusic.visible = true;							   }		if(fxEnabled){							  		this.OnFx.visible = true;							   		this.OffFx.visible = false;							   }else{								   	this.OnFx.visible = false;								   	this.OffFx.visible = true;							   }}Level1.prototype.unpause = function (event) {  if(this.game.paused){ 							  	var x1 = this.state.getCurrentState﻿().pauseBgMenu.x - this.state.getCurrentState﻿().pauseBgMenu.width/2;			  		x2 = this.state.getCurrentState﻿().pauseBgMenu.x + this.state.getCurrentState﻿().pauseBgMenu.width/2;			  		y1 = this.state.getCurrentState﻿().pauseBgMenu.y - this.state.getCurrentState﻿().pauseBgMenu.height/2;			  		y2 = this.state.getCurrentState﻿().pauseBgMenu.y + this.state.getCurrentState﻿().pauseBgMenu.height/2;			    if(event.x > x1 && event.x < x2 && event.y > y1 && event.y < y2 ){			    						var mx1 = this.state.getCurrentState﻿().OffMusic.x;							mx2 = this.state.getCurrentState﻿().OffMusic.x + this.state.getCurrentState﻿().OffMusic.width;							my1 = this.state.getCurrentState﻿().OffMusic.y;							my2 = this.state.getCurrentState﻿().OffMusic.y + this.state.getCurrentState﻿().OffMusic.height;						var fx1 = this.state.getCurrentState﻿().OnFx.x;							fx2 = this.state.getCurrentState﻿().OnFx.x + this.state.getCurrentState﻿().OnFx.width;							fy1 = this.state.getCurrentState﻿().OnFx.y;							fy2 = this.state.getCurrentState﻿().OnFx.y + this.state.getCurrentState﻿().OnFx.height;						var hx1 = this.state.getCurrentState﻿().HowToPlayBtn.x;							hx2 = this.state.getCurrentState﻿().HowToPlayBtn.x + this.state.getCurrentState﻿().HowToPlayBtn.width;							hy1 = this.state.getCurrentState﻿().HowToPlayBtn.y;							hy2 = this.state.getCurrentState﻿().HowToPlayBtn.y + this.state.getCurrentState﻿().HowToPlayBtn.height;						var qx1 = this.state.getCurrentState﻿().QuitBtn.x;							qx2 = this.state.getCurrentState﻿().QuitBtn.x + this.state.getCurrentState﻿().QuitBtn.width;							qy1 = this.state.getCurrentState﻿().QuitBtn.y;							qy2 = this.state.getCurrentState﻿().QuitBtn.y + this.state.getCurrentState﻿().QuitBtn.height;						if(event.x > mx1 && event.x < mx2 && event.y > my1 && event.y < my2 ){ //boton de musica																  if(musicEnabled){									this.OnBtn.visible = false;							   		this.OffMusic.visible = true;							   								   }else{								   	this.OnBtn.visible = true;								   	this.OffMusic.visible = false;							   }	    										this.state.getCurrentState﻿().switchMusic(); 													}					if(event.x > fx1 && event.x < fx2 && event.y > fy1 && event.y < fy2 ){ //boton de fx																  if(fxEnabled){									this.OnFx.visible = false;							   		this.OffFx.visible = true;							   								   }else{								   	this.OnFx.visible = true;								   	this.OffFx.visible = false;							   }	    														this.state.getCurrentState﻿().switchFX(); 													}					if(event.x > hx1 && event.x < hx2 && event.y > hy1 && event.y < hy2 ){ //boton de how to play															this.game.cache.removeSound('BgMusic');						this.game.cache.removeSound('BgMusic2');						this.game.state.start('Instructions');						this.game.paused = false;									}					if(event.x > qx1 && event.x < qx2 && event.y > qy1 && event.y < qy2 ){ //boton de salir									console.log('quiting');						location.reload();									}			    	  }else{   				   				this.game.paused = false;			  	this.state.getCurrentState﻿().Bg.destroy();			  	this.state.getCurrentState﻿().pauseBgMenu.destroy();			  	this.state.getCurrentState﻿().pauseIcons.destroy();			  	this.state.getCurrentState﻿().OnBtn.destroy();			  	this.state.getCurrentState﻿().OffMusic.destroy();			  	this.state.getCurrentState﻿().OnFx.destroy();			  	this.state.getCurrentState﻿().OffFx.destroy();			  	this.state.getCurrentState﻿().HowToPlayBtn.destroy();			  	this.state.getCurrentState﻿().QuitBtn.destroy();			  }			  }}Level1.prototype.swipeDownAction = function (pointer) {}Level1.prototype.swipeUpAction = function (pointer) {			this.swipeCoordX2 = pointer.x;  			this.swipeCoordY2 = pointer.y; }Level1.prototype.getShipDamage = function (danosDisponibles) {	return (Math.floor(Math.random()*danosDisponibles.length));}Level1.prototype.getDamage = function (cualDamage) {console.log('cualDamage ' + cualDamage);	switch (cualDamage){		case 'motor':		var hagaEsto = ['tuercas', 'metal' , 'bobinas' , 'piston'];		return hagaEsto;		console.log('haga motor');		break;		case 'casco':		var hagaEsto = ['metal'];		return hagaEsto;			console.log('haga casco');		break;		case 'panel':		var hagaEsto = ['cable', 'ci' , 'metal' , 'bobinas'];		return hagaEsto;		console.log('haga panel');		break;		case 'alas':		var hagaEsto = ['metal', 'bisagras' ];		return hagaEsto;			console.log('haga alas');				break;		case 'comunicacion':		var hagaEsto = ['ci', 'bobinas'];		return hagaEsto;		console.log('haga comunicacion');				break;		case 'panelSolar':		var hagaEsto = ['ci', 'metal' , 'fotoconductor'];		return hagaEsto;		console.log('haga panelSolar');				break;	}}Level1.prototype.myCreate = function () {	var numPiezas = 4;	var piezas = [];	var danosDisponibles = ['motor', 'casco' , 'panel' , 'alas' , 'comunicacion' , 'panelSolar'];	var initialDamage = this.getShipDamage(danosDisponibles);	console.log('initialDamage ' + initialDamage);	var cualDamage = danosDisponibles[initialDamage];	var getDamageParts = this.getDamage(cualDamage);		console.log('getDamageParts ' + getDamageParts);	timer = this.game.time.create(false);    timer.loop(2000, createPart, this);    timer.start();    function createPart(){    	var pieza = this.add.sprite(100, 0, 'pieza' + Math.floor(Math.random()*( 5 - 1 )+1));		var pieza2 = this.add.sprite(540, 0, 'pieza' + Math.floor(Math.random()*( 5 - 1 )+1));		pieza.scale.setTo(1.2, 1.2);		pieza2.scale.setTo(1.2, 1.2);		this.game.physics.enable(pieza, Phaser.Physics.ARCADE);		//this.fMegaBall.body.setCircle(30);				pieza.body.collideWorldBounds = false;			pieza.body.checkCollision.up = false;		pieza.anchor.setTo(0.5, 0.5);		pieza.body.velocity.y = 80;		pieza.body.angularVelocity = Math.random()*30;		pieza.inputEnabled = true;		this.game.physics.enable(pieza2, Phaser.Physics.ARCADE);		//this.fMegaBall.body.setCircle(30);				pieza2.body.collideWorldBounds = false;			pieza2.body.checkCollision.up = false;		pieza2.anchor.setTo(0.5, 0.5);		pieza2.body.velocity.y = 80;		pieza2.body.angularVelocity = Math.random()*30;		pieza2.inputEnabled = true;    //  Allow dragging - the 'true' parameter will make the sprite snap to the center    	pieza.input.enableDrag(true);    	pieza.events.onDragStart.add(onDragStart, this);   		pieza.events.onDragStop.add(onDragStop, this);		pieza2.events.onDragStart.add(onDragStart, this);   		pieza2.events.onDragStop.add(onDragStop, this);		this.fPiezasLeft.add(pieza);		piezas.push(pieza);		pieza2.input.enableDrag(true);		this.fPiezasLeft.add(pieza2);		piezas.push(pieza2);		function onDragStart(sprite, pointer){			if(this.game.physics.arcade.collide(sprite, this.fCasillas)){							this.fDraggedPieza.add(sprite);					}		}		function onDragStop(sprite, pointer){									if(this.game.physics.arcade.collide(sprite, this.fCasillas)){					this.fDraggedPieza.add(sprite);					sprite.input.draggable = false;					sprite.body.velocity.y = 0;					sprite.body.angularVelocity = 0;					trashAnim = this.game.add.tween(sprite.scale);				    trashAnim.to({x: 1.02, y:1.02}, 50, Phaser.Easing.Linear.None);				    trashAnim.onComplete.add(firstTween, this);				    trashAnim.start();				    				    function firstTween() {					   					    e = this.game.add.tween(sprite.scale);					    e.to({x: 0.1, y:0.1}, 300, Phaser.Easing.Linear.None);					    e.onComplete.add(spriteDestroy, this);					    e.start();					}					function spriteDestroy(){						sprite.destroy();					}			}				}    }			this.game.sound.mute = false;	this.fMenuBtn.inputEnabled = true;	this.fMenuBtn.events.onInputUp.add(this.manejarPausa,this);  //pausar juego  	this.game.input.onDown.add(this.unpause, this); //quitar pausa		this.barras=['Good', 'Incredible', 'Excelent', 'Amazing', 'Experienced', 'Insane', 'Soccer god' , 'Super!' , 'Hyper!', 'Cant be!', 'Not sane!' , 'Maximun combo!', 'Legend' , 'Hot Shot', 'Survivor', 'Warrior' , 'Proficient' , 'Phenomenon', 'Guru', 'Ultimate Authority'];	this.levelUp = 20; //variable que verifica cada cuantos niveles sale una leyenda de this.barras	this.currentLevel = 1;			BgMusic = this.game.add.audio('BgMusic', 0.3); //agregar musica y volumen	BgMusic.allowMultiple = false;	BgMusic.loop = true;	BgMusic2 = this.game.add.audio('BgMusic2', 0.3); //agregar musica y volumen	BgMusic2.allowMultiple = false;	BgMusic2.loop = true;		var BgMusicSelector = Math.round(Math.random()) //agreagar musica de bg randomicamente	if(BgMusicSelector >= 0.5 && musicEnabled){		this.BgMusic = 1;		BgMusic.play();			}	if(BgMusicSelector <= 0.5 && musicEnabled){		this.BgMusic = 2;		BgMusic2.play();			}	jumpBall = this.game.add.audio('jumpBall');	jumpBall.allowMultiple = false;	jumpBall.addMarker('jumpBall', 0, 0.13	);	luckyBall = this.game.add.audio('luckyBall');	luckyBall.allowMultiple = false;	luckyBall.addMarker('luckyBall', 0, 0.619);	death = this.game.add.audio('death');	death.allowMultiple = false;	death.addMarker('death', 0, 2.26);	cortar = this.game.add.audio('cortar');	cortar.allowMultiple = false;	cortar.addMarker('cortar', 0, 0.92);	levelUpSound = this.game.add.audio('levelUpSound');	levelUpSound.allowMultiple = false;	levelUpSound.addMarker('levelUpSound', 0, 1.10);		this.fxSounds = [jumpBall,luckyBall,death, levelUpSound,cortar]; //agreagar aqui todos los sound fx que se necesita adminstrar	if(!fxEnabled){		this.fxSounds.forEach(function(soundFx) { 	 //en caso de que se deshabilite los sonidos fxs		soundFx.mute = true;	},this);	}	this.jumping = false;	this.doubleJumping = false;	this.deathPhase = new Phaser.Signal();this.game.physics.enable(this.fCasilla1, Phaser.Physics.ARCADE);this.game.physics.enable(this.fCasilla2, Phaser.Physics.ARCADE);this.game.physics.enable(this.fCasilla3, Phaser.Physics.ARCADE);this.game.physics.enable(this.fCasilla4, Phaser.Physics.ARCADE);			this.game.physics.enable(this.fFloor, Phaser.Physics.ARCADE); //habilito el piso como un physic	this.fFloor.body.immovable = true;		this.swipeCoordX = 0;	this.swipeCoordX2 = 0;	this.swipeCoordY = 0;	this.swipeCoordY2 = 0;	this.VectorX = 0;	this.VectorY = 0;	this.PowerX = 0	this.DirX = 0;	this.PowerY = 0	this.DirY = 0;	this.ExtraPowerY = 3;	this.ExtraPowerX = 3;	this.wannaJump = false;	this.minJumpIntention = 65;	this.maxPowerX = 90;	this.cascaritas = 0;		this.game.input.onDown.add(function(pointer) { //manejo de swipe control de pantalla			this.swipeCoordX = pointer.x;  			this.swipeCoordY = pointer.y;   						}, this);   	this.game.input.onUp.add(this.swipeUpAction, this);  //manejo de swipe UP control de pantalla};Level1.prototype.update = function () {};Level1.prototype.deathAnimation = function () {	BgMusic.stop();	BgMusic2.stop();	death.play('death');	console.log('deathanim');	//this.game.state.restart(this.CurrentState);	emitter = this.game.add.emitter(this.fMegaBall.x, this.game.height, 4);    emitter.makeParticles('explodeBar');	emitter.blendMode = PIXI.blendModes.SCREEN;     emitter.setRotation(0, 0);    emitter.setAlpha(0.3, 0.8);    emitter.setScale(0.1, 0.7);    emitter.gravity = -16000;    //	false means don't explode all the sprites at once, but instead release at a rate of one particle per 100ms    //	The 5000 value is the lifespan of each particle before it's killed    emitter.start(false, 50000, 100);emitter2 = this.game.add.emitter(this.fMegaBall.x, this.game.height, 5);    emitter2.makeParticles('ring');    emitter2.setRotation(0, 180);    emitter2.setAlpha(0.3, 0.8);    emitter2.setScale(0.3, 1);    emitter2.gravity = 50;    //	false means don't explode all the sprites at once, but instead release at a rate of one particle per 100ms    //	The 5000 value is the lifespan of each particle before it's killed    emitter2.start(false, 3000, 100);this.game.time.events.add(Phaser.Timer.SECOND * 2, pantallaLose, this);function pantallaLose(){	this.GameOverScreen = this.game.add.sprite(0, 0, 'GameOverScreen');	this.GameOverScreen.alpha = 0.1;	this.game.add.tween(this.GameOverScreen).to( { alpha: 1 }, 500, Phaser.Easing.Linear.None, true);	this.againBtn = this.game.add.sprite(this.game.width/2, this.game.height/2+130, 'againBtn');	this.againBtn.anchor.setTo(0.5, 0.5);	this.score = this.game.add.bitmapText(this.game.width/2, this.game.height/2-5, 'PixelFont', this.fTime.text, 64);	this.score.anchor.setTo(0.5, 0.5);	this.againBtn.inputEnabled = true;	this.againBtn.events.onInputUp.add(function(pointer) {		this.game.state.restart(this.CurrentState);		this.game.time.reset();	   	}, this);  	} // this.game.time.events.add(Phaser.Timer.SECOND * 2, reiniciarNivel, this);function reiniciarNivel(){this.game.state.restart(this.CurrentState);this.game.time.reset();}};Level1.prototype.render = function () {// this.game.debug.geom(this.line1);	//this.game.debug.body(this.fMegaBall);	};